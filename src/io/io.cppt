#include "io.h"
#include "utils.h"
#include <fcntl.h>
#include <sstream>
#include <future>

using namespace upd;

@it "can write a file" {
  io::mock::reset();
  auto fd = io::open("/foobar.txt", O_CREAT, 0600);
  std::string str = "hello, world";
  io::write(fd, str.c_str(), str.size());
  io::close(fd);
  @expect(io::read_entire_file("/foobar.txt")).to_equal(str);
}

@it "can write a file in pieces" {
  io::mock::reset();
  auto fd = io::open("/foobar.txt", O_CREAT, 0600);
  std::string str = "hello, world";
  io::write(fd, str.c_str(), 5);
  io::write(fd, str.c_str() + 5, 7);
  io::close(fd);
  @expect(io::read_entire_file("/foobar.txt")).to_equal(str);
}

@it "writes a file in a directory" {
  io::mock::reset();
  io::mkdir("/glo", 0);
  auto fd = io::open("/glo/foobar.txt", O_CREAT, 0600);
  std::string str = "hello, world";
  io::write(fd, str.c_str(), str.size());
  io::close(fd);
  @expect(io::read_entire_file("/glo/foobar.txt")).to_equal(str);
}

@it "throws trying to write into non-existent directory" {
  io::mock::reset();
  try {
    io::open("/glo/foobar.txt", O_WRONLY | O_CREAT, 0600);
    throw std::runtime_error("should not reach");
  } catch (std::system_error error) {
    if (error.code() != std::errc::no_such_file_or_directory) throw;
  }
}

@it "reads entity names from a directory" {
  io::mock::reset();
  io::mkdir("/test", 0);
  io::write_entire_file("/test/foo.txt", "hello, world");
  io::write_entire_file("/test/bar.txt", "hello, world");
  io::write_entire_file("/test/glo.txt", "hello, world");
  DIR *dirp = io::opendir("/test");
  @expect(dirp).not_to_equal(nullptr);
  dirent *ent;
  @expect(ent = io::readdir(dirp)).not_to_equal(nullptr);
  @expect(std::string(ent->d_name)).to_equal("glo.txt");
  @expect(ent = io::readdir(dirp)).not_to_equal(nullptr);
  @expect(std::string(ent->d_name)).to_equal("bar.txt");
  @expect(ent = io::readdir(dirp)).not_to_equal(nullptr);
  @expect(std::string(ent->d_name)).to_equal("foo.txt");
  @expect(io::readdir(dirp)).to_equal(nullptr);
  @expect(io::closedir(dirp)).to_equal(0);
}

@it "gives temporary folder name" {
  io::mock::reset();
  io::mkdir("/foo", 0700);
  @expect(io::mkdtemp_s("/foo/bar-XXXXXX")).to_equal("/foo/bar-GybxCX");
}

@it "reads from a FIFO" {
  io::mock::reset();
  if (io::mkfifo("/test_fifo", 0600) != 0) io::throw_errno();
  auto reader = std::async(std::launch::async, io::read_entire_file, "/test_fifo");
  auto fd = io::open("/test_fifo", O_WRONLY, 0600);
  std::string str = "hello, world";
  io::write(fd, str.c_str(), str.size());
  io::close(fd);
  @expect(reader.get()).to_equal(str);
}
