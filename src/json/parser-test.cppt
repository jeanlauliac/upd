#include "../string_char_reader.h"
#include "lexer-test.h"
#include "parser.h"
#include <vector>

using namespace upd;

typedef json::lexer<string_char_reader> string_lexer;
typedef json::object_reader<string_lexer> object_reader;
typedef json::array_reader<string_lexer> array_reader;

struct empty {};

struct expect_empty_object_handler {
  typedef bool return_type;
  bool object(object_reader &reader) const {
    std::string field_name;
    return !reader.next(field_name);
  }
  bool array(array_reader &) const {
    throw std::runtime_error("unexpected array");
  }
  bool string_literal(const std::string &) const { return false; }
  bool number_literal(float) const { return false; }
};

struct expect_number_handler {
  typedef float return_type;
  return_type object(object_reader &) const {
    throw std::runtime_error("unexpected object");
  }
  return_type array(array_reader &) const {
    throw std::runtime_error("unexpected array");
  }
  return_type string_literal(const std::string &) const {
    throw std::runtime_error("unexpected");
  }
  return_type number_literal(float value) const { return value; }
};

struct expect_object_single_field_handler {
  typedef std::vector<std::pair<std::string, float>> return_type;
  return_type object(object_reader &reader) const {
    return_type fields;
    std::string field_name;
    while (reader.next(field_name)) {
      auto result = reader.next_value(expect_number_handler());
      fields.push_back({field_name, result});
    }
    return fields;
  }
  return_type array(array_reader &) const {
    throw std::runtime_error("unexpected");
  }
  return_type string_literal(const std::string &) const {
    throw std::runtime_error("unexpected");
  }
  return_type number_literal(float) const {
    throw std::runtime_error("unexpected");
  }
};

@it "parses empty object" {
  string_char_reader reader("{}");
  string_lexer lx(reader);
  @assert(json::parse_expression(lx, expect_empty_object_handler()));
  @assert(lx.next(expect_end_handler()));
}

@it "parses object with a field" {
  string_char_reader reader("{\"foo\": 42}");
  string_lexer lx(reader);
  auto res = json::parse_expression(lx, expect_object_single_field_handler());
  @assert(res ==
          expect_object_single_field_handler::return_type({{"foo", 42}}));
  @assert(lx.next(expect_end_handler()));
}

@it "parses object with several fields" {
  string_char_reader reader("{\"foo\": 42, \"bar\": 2, \"glo\": 76}");
  string_lexer lx(reader);
  auto res = json::parse_expression(lx, expect_object_single_field_handler());
  @assert(res == expect_object_single_field_handler::return_type({
                     {"foo", 42},
                     {"bar", 2},
                     {"glo", 76},
                 }));
  @assert(lx.next(expect_end_handler()));
}

struct array_of_numbers_handler {
  typedef float return_type;
  float object(object_reader &) const {
    throw std::runtime_error("expected number");
  }
  float array(array_reader &) const {
    throw std::runtime_error("expected number");
  }
  float string_literal(const std::string &) const {
    throw std::runtime_error("expected number");
  }
  float number_literal(float number) { return number; }
};

struct expect_number_array_handler {
  typedef bool return_type;
  expect_number_array_handler(const std::vector<float> &target)
      : target_(target) {}
  bool array(array_reader &reader) const {
    array_of_numbers_handler handler;
    float number;
    std::vector<float> numbers;
    while (reader.next(handler, number)) {
      numbers.push_back(number);
    }
    return numbers == target_;
  }
  bool object(object_reader &) const { return false; }
  bool string_literal(const std::string &) const { return false; }
  bool number_literal(float) const { return false; }

private:
  std::vector<float> target_;
};

@it "parses empty array" {
  string_char_reader reader("[]");
  string_lexer lx(reader);
  @assert(json::parse_expression(lx, expect_number_array_handler({})));
  @assert(lx.next(expect_end_handler()));
}

@it "parses array of numbers" {
  string_char_reader reader("[3, 5, 7, 13]");
  string_lexer lx(reader);
  @assert(
      json::parse_expression(lx, expect_number_array_handler({3, 5, 7, 13})));
  @assert(lx.next(expect_end_handler()));
}
