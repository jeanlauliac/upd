#include "../inspect.h"
#include "manifest.h"

using namespace upd::manifest;

@it "can inspect() update_rule_input" {
  update_rule_input in = update_rule_input::from_source(42);
  @expect(upd::inspect(in)).to_equal("upd::manifest::update_rule_input(0, 42)");
  in = update_rule_input::from_rule(42);
  @expect(upd::inspect(in)).to_equal("upd::manifest::update_rule_input(1, 42)");
}

@it "can inspect() update_rule" {
  update_rule in = update_rule{
      3,
      {update_rule_input::from_source(4)},
      {update_rule_input::from_rule(5)},
      upd::substitution::parse("foo/$1.o"),
  };
  @expect(upd::inspect(in)).to_equal(R"CPP(upd::manifest::update_rule({
  /* .command_line_ix = */ 3,
  /* .inputs = */ std::vector({
    upd::manifest::update_rule_input(0, 4) }),
  /* .dependencies = */ std::vector({
    upd::manifest::update_rule_input(1, 5) }),
  /* .output = */ upd::substitution::pattern({
    /* .segments = */ std::vector({
      upd::substitution::segment("foo/"),
      upd::substitution::segment(0, ".o") }),
    /* .capture_groups = */ std::vector({ }) }) }))CPP");
}
