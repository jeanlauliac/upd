#include "glob_test.h"

using namespace upd::glob;

@it "parse() convert strings properly" {
  @assert(parse("") == pattern({}));
  @assert(parse("*") == pattern({segment(placeholder::wildcard)}));
  @assert(parse("foo") == pattern({segment("foo")}));
  @assert(parse("foo*bar") ==
          pattern({segment("foo"), segment(placeholder::wildcard, "bar")}));
  @assert(parse("foo*") ==
          pattern({segment("foo"), segment(placeholder::wildcard)}));
  @assert(parse("*foo") == pattern({segment(placeholder::wildcard, "foo")}));
  @assert(parse("foo\\*bar") == pattern({segment("foo*bar")}));
  @assert(
      parse("foo?bar") ==
      pattern({segment("foo"), segment(placeholder::single_wildcard, "bar")}));
}

@it "upd::glob::match() matches empty pattern" {
  @assert(match(parse(""), ""));
}

@it "upd::glob::match() mismatches empty pattern" {
  @assert(!match(parse(""), "foo"));
}

@it "upd::glob::match() matches simple literal" {
  @assert(match(parse("foo"), "foo"));
}

@it "upd::glob::match() mismatches longer candidate" {
  @assert(!match(parse("foo"), "foobar"));
}

@it "upd::glob::match() mismatches longer literal" {
  @assert(!match(parse("foobar"), "foo"));
}

@it "upd::glob::match() mismatches empty literal" {
  @assert(!match(parse("foo"), ""));
}

@it "upd::glob::match() mismatches non-matching characters" {
  @assert(!match(parse("foo"), "fob"));
}

@it "upd::glob::match() matches final wildcard, no characters" {
  @assert(match(parse("foo*"), "foo"));
}

@it "upd::glob::match() matches final wildcard, with characters" {
  @assert(match(parse("foo*"), "foobar"));
}

@it "upd::glob::match() matches wildcard, no characters" {
  @assert(match(parse("foo*bar"), "foobar"));
}

@it "upd::glob::match() matches wildcard, with characters" {
  @assert(match(parse("foo*bar"), "foo_beep_bar"));
}

@it "upd::glob::match() mismatches wildcard" {
  @assert(!match(parse("foo*bar"), "foo_beep_boop"));
}

@it "upd::glob::match() mismatches wildcard, no characters" {
  @assert(!match(parse("foo*bar"), "foo"));
}

@it "upd::glob::match() matches starting wildcard, no characters" {
  @assert(match(parse("*bar"), "bar"));
}

@it "upd::glob::match() matches starting wildcard, with characters" {
  @assert(match(parse("*bar"), "foobar"));
}

@it "upd::glob::match() mismatches starting wildcard" {
  @assert(!match(parse("*bar"), "foobarglo"));
}

@it "upd::glob::match() matches several wildcards, no characters" {
  @assert(match(parse("*foo*bar*glo*"), "foobarglo"));
}

@it "upd::glob::match() matches several wildcards, with characters" {
  std::vector<size_t> indices;
  @assert(match(parse("*foo*bar*glo*"), "__foo_SMTHbar_BEEPglo_BOOP", indices));
  @assert(indices == std::vector<size_t>({0, 5, 13, 21}));
}

@it "upd::glob::match() mismatches several wildcards, with characters" {
  @assert(!match(parse("*foo*bar*glo*"), "__foo_SMTHbar_BEEPgl_BOOP"));
}

@it "upd::glob::match() matches utf8 in wildcard" {
  @assert(match(parse("*.js"), "汉语.js"));
}

@it "upd::glob::match() matches utf8 pattern" {
  @assert(match(parse("汉语*.汉语"), "汉语foo.汉语"));
}

@it "upd::glob::match() matches lone wildcard, no characters" {
  @assert(match(parse("*"), ""));
}

@it "upd::glob::match() matches lone wildcard, with characters" {
  @assert(match(parse("*"), "foobar"));
}

@it "upd::glob::match() matches single wildcard" {
  @assert(match(parse("???.js"), "foo.js"));
}

@it "upd::glob::match() matches single wildcards, with wildcard" {
  std::vector<size_t> indices;
  @assert(match(parse("foo*bar?glo?baz"), "foobarbarrglo$baz", indices));
  @assert(indices == std::vector<size_t>({0, 3, 9, 13}));
}

@it "upd::glob::match() mismatches single wildcard, with wildcard" {
  @assert(!match(parse("foo*bar?glo?baz"), "foobarbarrglo.baz"));
}
