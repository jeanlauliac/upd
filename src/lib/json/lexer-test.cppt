#include "../string_char_reader.h"
#include "lexer-test.h"
#include "lexer.h"

using namespace upd;

@it "tokenises single braces" {
  string_char_reader reader("{}\n");
  json::lexer<string_char_reader> lx(reader);
  @assert(
      lx.next(expect_punctuation_handler(json::punctuation_type::brace_open)));
  @assert(
      lx.next(expect_punctuation_handler(json::punctuation_type::brace_close)));
  @assert(lx.next(expect_end_handler()));
}

@it "tokenises object" {
  string_char_reader reader("{\"foo\": [\n\"bar\\\"glo\",\n42\n]}\n");
  json::lexer<string_char_reader> lx(reader);
  @assert(
      lx.next(expect_punctuation_handler(json::punctuation_type::brace_open)));
  @assert(lx.next(expect_string_literal_handler("foo")));
  @assert(lx.next(expect_punctuation_handler(json::punctuation_type::colon)));
  @assert(lx.next(
      expect_punctuation_handler(json::punctuation_type::bracket_open)));
  @assert(lx.next(expect_string_literal_handler("bar\"glo")));
  @assert(lx.next(expect_punctuation_handler(json::punctuation_type::comma)));
  @assert(lx.next(expect_number_literal_handler(42)));
  @assert(lx.next(
      expect_punctuation_handler(json::punctuation_type::bracket_close)));
  @assert(
      lx.next(expect_punctuation_handler(json::punctuation_type::brace_close)));
  @assert(lx.next(expect_end_handler()));
}

@it "throws on invalid characters" {
  string_char_reader reader("{\n  foo  }\n");
  json::lexer<string_char_reader> lx(reader);
  @assert(
      lx.next(expect_punctuation_handler(json::punctuation_type::brace_open)));
  try {
    lx.next(expect_punctuation_handler(json::punctuation_type::brace_close));
    @assert(false);
  } catch (json::invalid_character_error error) {
    @expect(error.chr).to_equal('f');
    @expect(error.location.line).to_equal(2ul);
    @expect(error.location.column).to_equal(3ul);
  }
}
