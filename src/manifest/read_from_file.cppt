#include "../io/utils.h"
#include "../path_glob/parse.h"
#include "../string_char_reader.h"
#include "read_from_file.h"

using namespace upd;

@it "parses empty manifest" {
  io::write_entire_file("/updfile.json", "{}");
  auto result = manifest::read_from_file("/");
  manifest::manifest expected;
  @expect(result).to_equal(expected);
}

@it "parses complex manifest" {
  io::write_entire_file("/updfile.json", R"JSON({
    "command_line_templates": [
      {
        "binary_path": "clang++",
        "arguments": [
          {"literals": ["-c", "-o"], "variables": ["output_file"]},
          {"literals": ["-std=c++14"], "variables": ["depfile"]},
          {"literals": ["-I", "/usr/local/include"], "variables": ["input_files"]}
        ]
      }
    ],
    "source_patterns": [
      "(src/lib/**/*).cppt",
      "(src/main).cpp"
    ],
    "rules": [
      {
        "command_line_ix": 13,
        "output": "dist/($1).o",
        "inputs": [{"source_ix": 1}, {"rule_ix": 2}],
        "dependencies": [{"rule_ix": 3}, {"rule_ix": 4}],
        "order_only_dependencies": [{"rule_ix": 5}]
      }
    ]
  }
)JSON");
  auto result = manifest::read_from_file("/");
  manifest::manifest expected = {
      {
          {
              "clang++",
              {command_line_template_part(
                   {"-c", "-o"},
                   {command_line_template_variable::output_files}),
               command_line_template_part(
                   {"-std=c++14"}, {command_line_template_variable::depfile}),
               command_line_template_part(
                   {"-I", "/usr/local/include"},
                   {command_line_template_variable::input_files})},
              {},
          },
      },
      {
          path_glob::parse("(src/lib/**/*).cppt"),
          path_glob::parse("(src/main).cpp"),
      },
      {
          {
              13,
              {
                  {manifest::input_type::source, 1},
                  {manifest::input_type::rule, 2},
              },
              {
                  {manifest::input_type::rule, 3},
                  {manifest::input_type::rule, 4},
              },
              {
                  {manifest::input_type::rule, 5},
              },
              substitution::parse("dist/($1).o"),
          },
      },
  };
  @expect(result).to_equal(expected);
}
